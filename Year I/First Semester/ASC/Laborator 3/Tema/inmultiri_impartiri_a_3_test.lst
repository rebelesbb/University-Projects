     1                                  bits 32 ;modificare conversii la fara semn
     2                                  global start
     3                                  extern exit
     4                                  import exit msvcrt.dll
     5                                  segment data use32 class=data
     6                                  ; a,b,d-byte; c-doubleword; x-qword
     7 00000000 48                      a db 48h
     8 00000001 02                      b db 02h
     9 00000002 6B420000                c dd 426Bh 
    10 00000006 07                      d db 07h
    11 00000007 C471FE286B0C243A        x dq 3A240C6B28FE71C4h
    12 0000000F <res 00000004>          aux resd 1
    13 00000013 <res 00000008>          rezultat resq 1
    14                                  segment code use32 calss=code
    15                                  start:
    16                                  ;(8-a*b*100+c)/d+x
    17                                  ;interpretare fara semn
    18                                  
    19                                  ;a*b*100
    20 00000000 A0[00000000]            mov al, [a]
    21 00000005 F625[01000000]          mul byte [b] ;ax=a*b= 90
    22                                  
    23 0000000B 66BB6400                mov bx, 100 
    24 0000000F 66F7E3                  mul bx ;dx:ax=a*b*100 = 00 00 38 40 
    25                                  
    26 00000012 6652                    push dx
    27 00000014 6650                    push ax 
    28 00000016 5B                      pop ebx ;ebx = 00 00 38 40
    29                                  
    30                                  ;8-a*b*100+c 
    31 00000017 B808000000              mov eax, 8
    32 0000001C 29D8                    sub eax, ebx ;eax = -a*b*100+c = 00 00 0A 2B
    33                                  
    34 0000001E 8B0D[02000000]          mov ecx, [c]
    35 00000024 01C8                    add eax, ecx 
    36 00000026 BA00000000              mov edx, 0 ;edx:eax = 8-a*b*100+c = 00 00 00 00 00 00 0A 33
    37 0000002B 89C3                    mov ebx, eax
    38                                  
    39                                  
    40 0000002D 89D1                    mov ecx, edx ;ecx:ebx = (8-a*b*100+c) = 00 00 00 00 00 00 0A 33
    41                                  
    42                                  ;(8-a*b*100+c)/d 
    43 0000002F B800000000              mov eax, 0
    44 00000034 A0[06000000]            mov al, [d] ; eax = d
    45 00000039 A3[0F000000]            mov [aux], eax
    46 0000003E 89D8                    mov eax, ebx
    47 00000040 89CA                    mov edx, ecx ;edx:eax = (8-a*b*100+c)
    48 00000042 F735[0F000000]          div dword [aux] ; eax = (8-a*b*100+c)/d = 00 00 01 75h
    49                                  
    50                                  ;(8-a*b*100+c)/d+x
    51 00000048 BA00000000              mov edx, 0 ; edx:eax = (8-a*b*100+c)/d = 00 00 00 00 00 00 01 75h
    52 0000004D F8                      clc
    53 0000004E 0305[07000000]          add eax, [x]
    54 00000054 1315[0B000000]          adc edx, [x+4] ; edx:eax = (8-a*b*100+c)/d + x = 3A 24 0C 6B 28 FE 73 39h
    55                                  
    56 0000005A A3[13000000]            mov [rezultat], eax
    57 0000005F 8915[17000000]          mov [rezultat+4], edx
    58                                  
    59 00000065 6A00                    push dword 0
    60 00000067 FF15[00000000]          call [exit] 
