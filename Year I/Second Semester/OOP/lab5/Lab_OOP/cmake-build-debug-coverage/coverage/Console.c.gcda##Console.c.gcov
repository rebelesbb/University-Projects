        -:    0:Source:C:/Users/Bogdan Rebeles/Desktop/OOP/lab5/Lab_OOP/Console.c
        -:    0:Graph:C:\Users\Bogdan Rebeles\Desktop\OOP\lab5\Lab_OOP\cmake-build-debug-coverage\CMakeFiles\untitled.dir\Console.c.gcno
        -:    0:Data:C:\Users\Bogdan Rebeles\Desktop\OOP\lab5\Lab_OOP\cmake-build-debug-coverage\CMakeFiles\untitled.dir\Console.c.gcda
        -:    0:Runs:1
        -:    1:#include "Console.h"
        -:    2:#include <stdio.h>
        -:    3:#include "Medicament.h"
        -:    4:#include "List.h"
        -:    5:#include "Undo.h"
        -:    6:#include <crtdbg.h>
        -:    7:
function print_list called 0 returned 0% blocks executed 0%
    #####:    8:void print_list(MyList* list) {
        -:    9:    /*
        -:   10:     * Printeaza medicamentele din lista data
        -:   11:     */
    #####:   12:     printf("\n");
    %%%%%:   12-block  0
call    0 never executed
    #####:   13:     if(!list->lungime)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   14:         printf("Lista este goala!\n");
    %%%%%:   14-block  0
call    0 never executed
        -:   15:     else {
    #####:   16:         for (int i = 0; i < list->lungime; i++)
    %%%%%:   16-block  0
    %%%%%:   16-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:   17:             printf("cod:%d, nume:%s, concentratie:%lf, cantitate:%d\n", get_cod(list->elems[i]),
call    0 never executed
call    1 never executed
    #####:   18:                    get_nume(list->elems[i]), get_concentratie(list->elems[i]), get_cantitate(list->elems[i]));
    %%%%%:   18-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:   19:     }
    #####:   20:     printf("\n");
    %%%%%:   20-block  0
call    0 never executed
    #####:   21:}
        -:   22:
function print_menu called 1 returned 100% blocks executed 100%
        1:   23:void print_menu() {
        -:   24:    /*
        -:   25:     * Printeaza meniul principal
        -:   26:     */
        1:   27:    printf("0. Print\n");
        1:   27-block  0
call    0 returned 1
        1:   28:    printf("1. Add\n");
call    0 returned 1
        1:   29:    printf("2. Modify\n");
call    0 returned 1
        1:   30:    printf("3. Delete\n");
call    0 returned 1
        1:   31:    printf("4. View sorted\n");
call    0 returned 1
        1:   32:    printf("5. Filter\n");
call    0 returned 1
        1:   33:    printf("6. Undo\n");
call    0 returned 1
        1:   34:    printf("7. Exit\n");
call    0 returned 1
        -:   35:
        1:   36:}
        -:   37:
function run called 1 returned 100% blocks executed 18%
        1:   38:void run() {
        -:   39:/*
        -:   40: * Programul principal
        -:   41: */
        1:   42: MyList* list = createList();
        1:   42-block  0
call    0 returned 1
        1:   43: MyList* undo_list = createList();
call    0 returned 1
        1:   44: int option = 0;
        -:   45:
        -:   46: while (1) {
        -:   47:
        1:   48:     print_menu();
        1:   48-block  0
call    0 returned 1
        -:   49:
        1:   50:     printf("Option: ");
call    0 returned 1
        1:   51:     scanf_s("%d", &option);
call    0 returned 1
        -:   52:
        1:   53:     if (option == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   54:     {
    #####:   55:         print_list(list);
    %%%%%:   55-block  0
call    0 never executed
        -:   56:     }
        1:   57:     else if (option == 1) {
        1:   57-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   58:         int cod, cantitate;
        -:   59:         double concentratie;
        -:   60:         char nume[50];
        -:   61:
    #####:   62:         printf("Cod:");
    %%%%%:   62-block  0
call    0 never executed
    #####:   63:         scanf_s("%d", &cod);
call    0 never executed
        -:   64:
    #####:   65:         printf("Nume:");
call    0 never executed
    #####:   66:         scanf_s("%s", nume, 50);
call    0 never executed
        -:   67:
    #####:   68:         printf("Concentratie:");
call    0 never executed
    #####:   69:         scanf_s("%lf", &concentratie);
call    0 never executed
        -:   70:
    #####:   71:         printf("Cantiate:");
call    0 never executed
    #####:   72:         scanf_s("%d", &cantitate);
call    0 never executed
        -:   73:
    #####:   74:         Medicament* med = createMed(cod, nume, concentratie, cantitate);
call    0 never executed
        -:   75:
    #####:   76:         if (validateMed(med) == 0) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:   77:             store_current_state(list, undo_list);
    %%%%%:   77-block  0
call    0 never executed
    #####:   78:             add_medicament(med, list);
call    0 never executed
        -:   79:         }
        -:   80:         else {
    #####:   81:             printf("Date invalide\n\n");
    %%%%%:   81-block  0
call    0 never executed
    #####:   82:             destroyMed(med);
call    0 never executed
        -:   83:         }
        -:   84:
        -:   85:     }
        1:   86:     else if (option == 2) {
        1:   86-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   87:
    #####:   88:         int cod = 0;
    #####:   89:         printf("Cod:");
    %%%%%:   89-block  0
call    0 never executed
    #####:   90:         scanf_s("%d", &cod);
call    0 never executed
        -:   91:
        -:   92:
        -:   93:         double concentratie;
        -:   94:         char nume[50];
        -:   95:
    #####:   96:         printf("Nume:");
call    0 never executed
    #####:   97:         scanf_s("%s", nume, 50);
call    0 never executed
        -:   98:
    #####:   99:         printf("Concentratie:");
call    0 never executed
    #####:  100:         scanf_s("%lf", &concentratie);
call    0 never executed
        -:  101:
    #####:  102:         store_current_state(list, undo_list);
call    0 never executed
    #####:  103:         modify_medicament(cod, concentratie, nume, list);
call    0 never executed
        -:  104:     }
        1:  105:     else if (option == 3) {
        1:  105-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  106:         int cod = 0;
    #####:  107:         printf("Cod:");
    %%%%%:  107-block  0
call    0 never executed
    #####:  108:         scanf_s("%d", &cod);
call    0 never executed
        -:  109:
    #####:  110:         store_current_state(list, undo_list);
call    0 never executed
    #####:  111:         delete_medicament(cod, list);
call    0 never executed
        -:  112:     }
        1:  113:     else if (option == 4) {
        1:  113-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  114:         printf("\n1. Dupa Nume\n");
    %%%%%:  114-block  0
call    0 never executed
    #####:  115:         printf("2. Dupa Cantitate(crescator)\n");
call    0 never executed
    #####:  116:         printf("3. Dupa Cantitate(descrescator)\n");
call    0 never executed
    #####:  117:         printf("4. Dupa cantitate si concentratie, crescator\n");
call    0 never executed
    #####:  118:         printf("Option: ");
call    0 never executed
    #####:  119:         int opt = 0;
    #####:  120:         scanf_s("%d", &opt);
call    0 never executed
        -:  121:
    #####:  122:         printf("Sortat: ");
call    0 never executed
        -:  123:         MyList* res;
        -:  124:
    #####:  125:         if (opt == 1) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  126:             res = sort_meds(list, (CompareFunction) compare_nume);
    %%%%%:  126-block  0
call    0 never executed
        -:  127:         }
    #####:  128:         else if (opt == 2) {
    %%%%%:  128-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  129:             res = sort_meds(list, (CompareFunction) compare_cantitate_cresc);
    %%%%%:  129-block  0
call    0 never executed
        -:  130:         }
    #####:  131:         else if (opt == 3){
    %%%%%:  131-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  132:             res = sort_meds(list, (CompareFunction) compare_cantitate_descresc);
    %%%%%:  132-block  0
call    0 never executed
        -:  133:
        -:  134:         }
        -:  135:         else{
    #####:  136:             res = sort_meds(list, (CompareFunction) compare_cantitate_concentratie);
    %%%%%:  136-block  0
call    0 never executed
        -:  137:         }
        -:  138:
    #####:  139:         print_list(res);
    %%%%%:  139-block  0
call    0 never executed
    #####:  140:         destroyList(res, (DestroyFunction) destroyMed);
call    0 never executed
        -:  141:
        -:  142:     }
        1:  143:     else if (option == 5) {
        1:  143-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  144:         printf("\n1. Cantitate mai mica \n");
    %%%%%:  144-block  0
call    0 never executed
    #####:  145:         printf("2. Incepe cu litera data\n3. Cantitate mai mare\n");
call    0 never executed
    #####:  146:         printf("Option: ");
call    0 never executed
    #####:  147:         int opt = 0;
    #####:  148:         scanf_s("%d", &opt);
call    0 never executed
        -:  149:         char some;
    #####:  150:         scanf_s("%c", &some, 1);
call    0 never executed
        -:  151:
    #####:  152:         MyList* res = NULL;
        -:  153:
    #####:  154:         if (opt == 1) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  155:             int a = 0;
    #####:  156:             printf("Cantitate: ");
    %%%%%:  156-block  0
call    0 never executed
    #####:  157:             scanf_s("%d", &a);
call    0 never executed
        -:  158:
    #####:  159:             res = filter_meds(list, opt, a);
call    0 never executed
        -:  160:         }
    #####:  161:         else if(opt == 2){
    %%%%%:  161-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  162:             char a = ' '; //??
    #####:  163:             printf("Litera: ");
    %%%%%:  163-block  0
call    0 never executed
    #####:  164:             scanf_s("%c", &a, 1);
call    0 never executed
        -:  165:
    #####:  166:             res = filter_meds(list, opt, a);
call    0 never executed
    #####:  167:         } else if(opt == 3)
    %%%%%:  167-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  168:         {
    #####:  169:             int a = 0;
    #####:  170:             printf("Cantitate: ");
    %%%%%:  170-block  0
call    0 never executed
    #####:  171:             scanf_s("%d", &a);
call    0 never executed
        -:  172:
    #####:  173:             res = filter_meds(list, opt, a);
call    0 never executed
    #####:  174:         } else printf("%s", "Optiune invalida");
    %%%%%:  174-block  0
call    0 never executed
        -:  175:
    #####:  176:        if(res) {
    %%%%%:  176-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  177:            printf("Filtrat: ");
    %%%%%:  177-block  0
call    0 never executed
    #####:  178:            print_list(res);
call    0 never executed
    #####:  179:            destroyList(res, (DestroyFunction) destroyMed);
call    0 never executed
        -:  180:        }
        -:  181:     }
        1:  182:     else if (option == 6) {
        1:  182-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  183:         if(undo_list->lungime) {
    %%%%%:  183-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  184:             //destroyList(list, (DestroyFunction) destroyMed);
        -:  185:             //list = undo_list->elems[undo_list->lungime - 1];
        -:  186:             //undo_list->lungime--;
    #####:  187:             list = undo(list, undo_list);  ///????
    %%%%%:  187-block  0
call    0 never executed
    #####:  188:             printf("Undo realizat cu succes.\n");
call    0 never executed
    #####:  189:         } else printf("Nu se poate realiza undo.\n");
    %%%%%:  189-block  0
call    0 never executed
        -:  190:     }
        1:  191:     else if(option == 7){
        1:  191-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  192:         destroyList(list, (DestroyFunction) destroyMed);
        1:  192-block  0
call    0 returned 1
        -:  193:         /*for(int index = 0; index < undo_list->lungime; index++) {
        -:  194:             destroyList(undo_list->elems[index], (DestroyFunction) destroyMed);
        -:  195:         }
        -:  196:         free(undo_list);*/
        1:  197:         destroyList(undo_list, (DestroyFunction) destroyUndoMeds);
call    0 returned 1
        -:  198:         _CrtDumpMemoryLeaks();
        1:  199:         break;
        -:  200:     }
        -:  201:     else {
    #####:  202:         printf("Invalid option\n");
    %%%%%:  202-block  0
call    0 never executed
        -:  203:     }
        -:  204:     //print_list(undo_list->elems[undo_list->lungime - 1]);
        -:  205:     //print_list(list);
        -:  206: }
        1:  207:}
