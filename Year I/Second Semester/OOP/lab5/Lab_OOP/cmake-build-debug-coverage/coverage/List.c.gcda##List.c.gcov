        -:    0:Source:C:/Users/Bogdan Rebeles/Desktop/OOP/lab5/Lab_OOP/List.c
        -:    0:Graph:C:\Users\Bogdan Rebeles\Desktop\OOP\lab5\Lab_OOP\cmake-build-debug-coverage\CMakeFiles\untitled.dir\List.c.gcno
        -:    0:Data:C:\Users\Bogdan Rebeles\Desktop\OOP\lab5\Lab_OOP\cmake-build-debug-coverage\CMakeFiles\untitled.dir\List.c.gcda
        -:    0:Runs:1
        -:    1:#include "List.h"
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:
function createList called 23 returned 100% blocks executed 100%
       23:    5:MyList* createList() {
        -:    6:    /*
        -:    7:     * Returneaza o lista nous
        -:    8:     * return: MyList
        -:    9:     */
       23:   10:    MyList* list = malloc(sizeof(MyList));
       23:   11:    list->lungime = 0;
       23:   12:    list->capacitate = 10;
       23:   13:    list->elems = malloc(list->capacitate * sizeof(ElementType));
        -:   14:
       23:   15:    return list;
       23:   15-block  0
        -:   16:}
        -:   17:
function destroyList called 21 returned 100% blocks executed 100%
       21:   18:void destroyList(MyList* list, DestroyFunction destrFunc)
        -:   19:{
       74:   20:    for (int i = 0; i < list->lungime; i++)
       21:   20-block  0
       74:   20-block  1
branch  0 taken 53
branch  1 taken 21 (fallthrough)
       53:   21:        destrFunc(list->elems[i]);
       53:   21-block  0
call    0 returned 53
        -:   22:
       21:   23:    free(list->elems);
       21:   24:    free(list);
       21:   25:}
        -:   26:
function expand called 2 returned 100% blocks executed 100%
        2:   27:void expand(MyList* list) {
        -:   28:    /*
        -:   29:     * Dubleaza capacitatea listei date
        -:   30:     * list: pointer catre lista MyList
        -:   31:     * post: capacitatea va fi dublata
        -:   32:     */
        2:   33:    list->capacitate *= 2;
        2:   34:    list->elems = realloc(list->elems, list->capacitate * sizeof(ElementType));
        2:   35:}
        -:   36:
function get_element called 11 returned 100% blocks executed 100%
       11:   37:ElementType get_element(MyList* list, int index)
        -:   38:{
       11:   39:    return list->elems[index];
       11:   39-block  0
        -:   40:}
        -:   41:
function get_initial called 6 returned 100% blocks executed 100%
        6:   42:char get_initial(char* word)
        -:   43:{
        6:   44:    return word[0];
        6:   44-block  0
        -:   45:}
        -:   46:
        -:   47:
function store called 62 returned 100% blocks executed 100%
       62:   48:void store(MyList* list, ElementType element)
        -:   49:{
       62:   50:    if (list->lungime + 1 > list->capacitate)
       62:   50-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 60
        2:   51:        expand(list);
        2:   51-block  0
call    0 returned 2
       62:   52:    list->elems[list->lungime] = element;
       62:   53:    (list->lungime)++;
       62:   54:}
        -:   55:
function delete called 2 returned 100% blocks executed 100%
        2:   56:void delete(MyList* list, int position, DestroyFunction destrFunc)
        -:   57:{
        2:   58:    destrFunc(list->elems[position]);
        2:   58-block  0
call    0 returned 2
        3:   59:    for(int index = position; index < list->lungime - 1; index++)
        3:   59-block  0
branch  0 taken 1
branch  1 taken 2 (fallthrough)
        1:   60:        list->elems[index] = list->elems[index + 1];
        1:   60-block  0
        2:   61:    list->lungime--;
        2:   62:}
        -:   63:
function modify called 2 returned 100% blocks executed 100%
        2:   64:void modify(MyList* list, ElementType new_element, int position, DestroyFunction destrFunc)
        -:   65:{
        2:   66:    ElementType previous_element = get_element(list, position);
        2:   66-block  0
call    0 returned 2
        2:   67:    list->elems[position] = new_element;
        2:   68:    destrFunc(previous_element);
call    0 returned 2
        2:   69:}
        -:   70:
function copyElems called 8 returned 100% blocks executed 100%
        8:   71:void copyElems(MyList* src, MyList* dest, CopyFunction copyFunc) {
        -:   72:    /*
        -:   73:     * Face o copie a elems din lista sursa in lista destinatie
        -:   74:     * src: MyList
        -:   75:     * dest: pointer MyList
        -:   76:     * post: se va creea o noua tablou elems
        -:   77:     */
        -:   78:
       23:   79:    for (int i = 0; i < src->lungime; i++) {
        8:   79-block  0
       23:   79-block  1
branch  0 taken 15
branch  1 taken 8 (fallthrough)
       15:   80:        store(dest,copyFunc(src->elems[i]));
       15:   80-block  0
call    0 returned 15
call    1 returned 15
        -:   81:    }
        8:   82:}
        -:   83:
        -:   84:///service
function add_medicament called 40 returned 100% blocks executed 94%
       40:   85:void add_medicament(Medicament* med, MyList* list) {
        -:   86:    /*
        -:   87:     * Adauga medicamentul in lista
        -:   88:     * med: Medicament
        -:   89:     * list: pointer MyList
        -:   90:     * post: medicamentul va fi adaugat in lista
        -:   91:     */
       40:   92:    int exists = 0;
      306:   93:    for (int i = 0; i < list->lungime; i++) {
       40:   93-block  0
      266:   93-block  1
      306:   93-block  2
branch  0 taken 267
branch  1 taken 39 (fallthrough)
      267:   94:        if (get_cod(list->elems[i]) == med->cod) {
      267:   94-block  0
call    0 returned 267
branch  1 taken 1 (fallthrough)
branch  2 taken 266
        1:   95:            exists = 1;
        1:   96:            set_cantitate(get_element(list, i),
call    0 returned 1
        1:   97:                          get_cantitate(get_element(list, i)) + med->cantitate);
        1:   97-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1:   98:            destroyMed(med);
call    0 returned 1
        -:   99:            ///printf("%d", get_cantitate(get_element(list, i)));
        1:  100:            break;
        -:  101:        }
        -:  102:    }
       40:  103:    if (exists == 0) {
       40:  103-block  0
branch  0 taken 39 (fallthrough)
branch  1 taken 1
       39:  104:       if(list->lungime > list->capacitate)
       39:  104-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 39
    #####:  105:           expand(list);
    %%%%%:  105-block  0
call    0 never executed
       39:  106:        store(list, med);
       39:  106-block  0
call    0 returned 39
        -:  107:    }
        -:  108:
       40:  109:}
        -:  110:
function delete_medicament called 2 returned 100% blocks executed 86%
        2:  111:void delete_medicament(int cod, MyList* list) {
        -:  112:    /*
        -:  113:     * Sterge medicamentul cu codul dat din lista
        -:  114:     * cod: int, codul medicamentului
        -:  115:     * list: pointer MyList
        -:  116:     * post: medicamentul va fi sters din lista, daca exista
        -:  117:     */
        2:  118:    int i = 0;
       2*:  119:    while (i < list->lungime && get_cod(list->elems[i]) != cod) i++;
        2:  119-block  0
    %%%%%:  119-block  1
        2:  119-block  2
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  119-block  3
call    2 returned 2
branch  3 taken 0
branch  4 taken 2 (fallthrough)
        -:  120:
        2:  121:    delete(list, i, (DestroyFunction) destroyMed);
        2:  121-block  0
call    0 returned 2
        2:  122:}
        -:  123:
function modify_medicament called 3 returned 100% blocks executed 100%
        3:  124:void modify_medicament(int cod, double conc, char nume[50], MyList* list) {
        -:  125:    /*
        -:  126:     * Modifica medicamentul cu codul dat din lista, folosind concentratia si numele dat
        -:  127:     * cod: int, codul medicamentului
        -:  128:     * concentratie: double, > 0, concentratia
        -:  129:     * nume: cstring, max 50 char, numele
        -:  130:     * list: pointer MyList
        -:  131:     * post: medicamentul va fi modificat in lista, daca exista
        -:  132:     */
        3:  133:    int i = 0;
        6:  134:    while (i < list->lungime && get_cod(list->elems[i]) != cod) i++;
        3:  134-block  0
        3:  134-block  1
        6:  134-block  2
branch  0 taken 5 (fallthrough)
branch  1 taken 1
        5:  134-block  3
call    2 returned 5
branch  3 taken 3
branch  4 taken 2 (fallthrough)
        -:  135:
        3:  136:    if (i < list->lungime) {
        3:  136-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  137:        Medicament* new_med = createMed(cod, nume, conc, get_cantitate(get_element(list, i)));
        2:  137-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        2:  138:        modify(list, new_med, i, (DestroyFunction) destroyMed);
call    0 returned 2
        -:  139:    }
        3:  140:}
        -:  141:
function compare_nume called 3 returned 100% blocks executed 100%
        3:  142:int compare_nume(Medicament a, Medicament b)
        -:  143:{
        -:  144:    /* Returneaza 1 daca numele lui a e mai "mic" sau egal lexicografic ca numele lui b, 0 daca nu
        -:  145:     * a: Medicament
        -:  146:     * b: Medicament
        -:  147:     * return: 1 daca a "<=" b lexicografic, 0 daca nu
        -:  148:     */
        3:  149:    return (strcmp(a.nume, b.nume) <= 0);
        3:  149-block  0
        -:  150:}
        -:  151:
function compare_cantitate_cresc called 3 returned 100% blocks executed 100%
        3:  152:int compare_cantitate_cresc(Medicament a, Medicament b)
        -:  153:{
        -:  154:    /* Returneaza 1 daca cantitaea lui a e < cantitaealui b, 0 daca nu
        -:  155:     * a: Medicament
        -:  156:     * b: Medicament
        -:  157:     * return: 1 daca cantitate a < cantitate b, 0 daca nu
        -:  158:     */
        3:  159:    return (a.cantitate < b.cantitate);
        3:  159-block  0
        -:  160:}
        -:  161:
function compare_cantitate_descresc called 3 returned 100% blocks executed 100%
        3:  162:int compare_cantitate_descresc(Medicament a, Medicament b)
        -:  163:{
        -:  164:    /* Returneaza 1 daca cantitaea lui a e > cantitaea lui b, 0 daca nu
        -:  165:     * a: Medicament
        -:  166:     * b: Medicament
        -:  167:     * return: 1 daca cantitate a > cantitate b, 0 daca nu
        -:  168:     */
        3:  169:    return (a.cantitate > b.cantitate);
        3:  169-block  0
        -:  170:}
        -:  171:
function compare_cantitate_concentratie called 6 returned 100% blocks executed 100%
        6:  172:int compare_cantitate_concentratie(Medicament a, Medicament b)
        -:  173:{
       11:  174:    if(get_cantitate(&a) < get_cantitate(&b) ||
        6:  174-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 5 (fallthrough)
branch  3 taken 1
branch  4 taken 1 (fallthrough)
branch  5 taken 4
        6:  175:      (get_cantitate(&a) == get_cantitate(&b) && get_concentratie(&a) < get_concentratie(&b)))
        5:  175-block  0
call    0 returned 5
call    1 returned 5
        1:  175-block  1
call    2 returned 1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
        1:  176:        return 1;
        1:  176-block  0
        5:  177:    return 0;
        5:  177-block  0
        -:  178:}
        -:  179:
function sort_meds called 4 returned 100% blocks executed 100%
        4:  180:MyList* sort_meds(MyList* list, CompareFunction compare) {
        -:  181:    /*
        -:  182:     * Returneaza o lista noua care contine medicamentele sortate dupa nume sau cantitate(descrescator/crescator)
        -:  183:     * list: MyList
        -:  184:     * optiune: int, 0 - dupa nume, 1 - dupa cantitate(crescator), 2 - dupa cantiate(descrescator)
        -:  185:     * return: MyList, lista sortata
        -:  186:     */
        4:  187:     MyList* new_list = createList();
        4:  187-block  0
call    0 returned 4
        4:  188:     copyElems(list, new_list, (CopyFunction) copyMed);
call    0 returned 4
        -:  189:
       13:  190:     for (int i = 0; i < new_list->lungime - 1; i++) {
        9:  190-block  0
       13:  190-block  1
branch  0 taken 9
branch  1 taken 4 (fallthrough)
       24:  191:         for (int j = i + 1; j < new_list->lungime; j++) {
        9:  191-block  0
       15:  191-block  1
       24:  191-block  2
branch  0 taken 15
branch  1 taken 9 (fallthrough)
       15:  192:             if (compare(new_list->elems[i], new_list->elems[j]) != 1) {
       15:  192-block  0
call    0 returned 15
branch  1 taken 9 (fallthrough)
branch  2 taken 6
        9:  193:                 Medicament* aux = new_list->elems[i];
        9:  194:                 new_list->elems[i] = new_list->elems[j];
        9:  195:                 new_list->elems[j] = aux;
        9:  195-block  0
        -:  196:             }
        -:  197:         }
        -:  198:     }
        -:  199:
        4:  200:     return new_list;
        4:  200-block  0
        -:  201:}
        -:  202:
function filter_meds called 4 returned 100% blocks executed 100%
        4:  203:MyList* filter_meds(MyList* list, int optiune, int filtru) {
        -:  204:    /*
        -:  205:    * Returneaza o lista noua care contine medicamentele filtrate (cantitate mai mica de N / nume incepand cu o litera)
        -:  206:    * list: MyList
        -:  207:    * optiune: int, 1 - filtrare dupa cantitate, 2 - filtrare dupa prima litera din nume
        -:  208:    * filtru: daca optiune = 1: cantitatea ceruta, daca optiune = 2: (ascii) litera ceruta
        -:  209:    *         daca optiune = 3: concentratia ceruta
        -:  210:    * return: MyList, lista filtrata
        -:  211:    */
        4:  212:    MyList* new_list = createList();
        4:  212-block  0
call    0 returned 4
        -:  213:
        4:  214:    if (optiune == 1) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  215:        filtru = (int) (filtru);
        4:  216:        for (int i = 0; i < list->lungime; i++) {
        1:  216-block  0
        3:  216-block  1
        4:  216-block  2
branch  0 taken 3
branch  1 taken 1
        3:  217:            if (get_cantitate(list->elems[i]) < filtru) {
        3:  217-block  0
call    0 returned 3
branch  1 taken 2 (fallthrough)
branch  2 taken 1
        2:  218:                Medicament* new_med = copyMed(get_element(list,i));
        2:  218-block  0
call    0 returned 2
call    1 returned 2
        2:  219:                store(new_list,new_med);
call    0 returned 2
        -:  220:            }
        -:  221:        }
        3:  222:    } else if (optiune == 2) {
        3:  222-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        8:  223:        for (int i = 0; i < list->lungime; i++) {
        2:  223-block  0
        6:  223-block  1
        8:  223-block  2
branch  0 taken 6
branch  1 taken 2
        6:  224:            if (get_initial(get_nume(list->elems[i])) == (char) filtru) {
        6:  224-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 1 (fallthrough)
branch  3 taken 5
        1:  225:                Medicament* new_med = copyMed(get_element(list,i));
        1:  225-block  0
call    0 returned 1
call    1 returned 1
        1:  226:                store(new_list,new_med);
call    0 returned 1
        -:  227:            }
        -:  228:        }
        1:  229:    } else if(optiune == 3)
        1:  229-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  230:    {
        4:  231:        for(int i = 0; i < list->lungime; i++) {
        1:  231-block  0
        3:  231-block  1
        4:  231-block  2
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        3:  232:            if (get_cantitate(list->elems[i]) > filtru) {
        3:  232-block  0
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
        1:  233:                Medicament* new_med = copyMed(get_element(list,i));
        1:  233-block  0
call    0 returned 1
call    1 returned 1
        1:  234:                store(new_list,new_med);
call    0 returned 1
        -:  235:            }
        -:  236:        }
        -:  237:    }
        -:  238:
        4:  239:    return new_list;
        4:  239-block  0
        -:  240:}
        -:  241:
